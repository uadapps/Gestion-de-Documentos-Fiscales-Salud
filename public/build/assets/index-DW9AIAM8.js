let a={};const l=n=>{if(!n||!n.query&&!n.mergeQuery)return"";const t=n.query??n.mergeQuery,i=n.mergeQuery!==void 0,o=e=>e===!0?"1":e===!1?"0":e.toString(),r=new URLSearchParams(i&&typeof window<"u"?window.location.search:"");for(const e in t){if(t[e]===void 0||t[e]===null){r.delete(e);continue}if(Array.isArray(t[e]))r.has(`${e}[]`)&&r.delete(`${e}[]`),t[e].forEach(s=>{r.append(`${e}[]`,s.toString())});else if(typeof t[e]=="object"){r.forEach((s,c)=>{c.startsWith(`${e}[`)&&r.delete(c)});for(const s in t[e])typeof t[e][s]>"u"||["string","number","boolean"].includes(typeof t[e][s])&&r.set(`${e}[${s}]`,o(t[e][s]))}else r.set(e,o(t[e]))}const f=r.toString();return f.length>0?`?${f}`:""},u=n=>{const t={...n??{}};for(const i in a)t[i]===void 0&&a[i]!==void 0&&(t[i]=a[i]);return t},d=(n,t)=>{const i=t.filter(r=>!n?.[r]),o=t.slice(i.length*-1);for(let r=0;r<i.length;r++)if(i[r]!==o[r])throw Error("Unexpected optional parameters missing. Unable to generate a URL.")};export{u as a,l as q,d as v};
